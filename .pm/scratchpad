## Components
### The Loop

The Loop or the Control Loop, is an orchestra of micro-controllers that are continuously ensuring the user’s turned-on recipes are continuing to generate their intended things. Each microcontroller is the realization of a recipe written by the user and is implemented with the microcontroller framework, built on top of Kubernetes controller framework [which?].


### The Belt
Requests that are dispatched to retrieve or change some state of some resource(s) on some service. They go through the belt to get bundled up and scheduled for some optimal notion of traffic pattern optimality, while meeting the latency requirements of the original clients.  


### DSL

### NLU Compiler

### Provider Framework

### Thing API

### Ingredients Templates

## The Technology

There are a few trends that lynq bets heavily on, without making large assumptions about their exact path and timescale of evolution. Although many of these technological and societal trends are profound in their own right, we are building for a world where many or all of them have matured to some degree. Of course, the only thing more uncertain than the future of a technology is the future of N technologies developing over half a decade. 

We mitigate this uncertainty risk by 1) always building end-to-end working software (as opposed to building-blocks solely for their future value) and 2) not making any assumptions about the sequence in which we'll work on these technologies so that we can delay or rush experimentation with the parts of the ecosystem based on how that technology matures over the next few years. 

### AutoML will grow to help all stages of data curation, processing, and creation

### Natural language-inspired programming languages

### State management as code

### Distributed Ledger Technology will create an easy way to trace the lineage of artifacts


## Privacy

One interesting force that will motivate and accelerate the development of viable blockchain technologies in the next many years is the speed at which we are losing trust in content online. As we get better at creating multimedia programmatically, we’ll have to develop a way of trusting that something was created authentically, for some definition of authenticity. Once established (somehow), a blockchain-like technology can be used to verify that authenticity for the rest of time, which is an extremely useful capability. This will become exceedingly more important as monetization of content and information becomes more commonplace. In a world where there is non-trivial monetary value associated with information and content, which is easy to copy and redistribute, we will be motivated to build technology that can assert the lineage of artifacts and provides a shared context for all users to implement some mechanism of credit (monetary value) assignment.

One initial UI is the sharing button on Android which can accept just about any type of `thing`. Depending on the type, it would process it differently. 


### the DSL

`things` are represented as strongly typed objects with multiple hierarchy inheritance (maybe..). Each `Thing` has a single canonical representation. 

`facts` are represented and treated more as a log of events. 

One important facet of the DSL is that it allows interoperability between the language that gardeners use to implement `ingredients` and what is used by chefs to build `recipes`. 


abstractions of abstractions of abstractions, it allows people to sort of interact with the It’s important to give everyone (especially those who do not make heavy use of computers in the early decades of their lives, a nice migration path to being able to use machines to enhance their craft.

Anyone can create an implementation for any already implemented action in a matter of seconds.


Recipes are written in the form of triplet statements over things and facts. 


Define the schema for things and facts
Make sure facts are captured about the world, and things are created accordingly










